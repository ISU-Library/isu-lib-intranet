{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{# ! This styles the staff news articles page #}

{% set ImgSrc = file_url(node.field_staff_news_main_image.entity.fileuri) %}
{% set ImgAlt = node.field_staff_news_main_image.alt %}

<article {{ attributes }}>
  {{ title_prefix }}
  {% if label and not page %}
    <h2 {{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {# * Below is the start to custom styling content #}
  <div
    style="background-image:url({{ ImgSrc }})"
    class="bg-center bg-no-repeat bg-cover max-w-[57rem] mx-auto mb-2xl pt-[46%] shadow-light-2"
  >
    {# <div
      {{
      content_attributes.addClass(
        'flex',
        'flex-col',
        'justify-end',
        'max-w-[57rem]',
        'mx-auto',
        'pt-7xl'
      )
      }}
    >
      <h1 class="mb-lg text-white text-shadow-1">{{ label }}</h1>
      <p class="text-lg text-white text-shadow-1">
        {{ content.field_department_summary|field_value }}
      </p>
    </div> #}
  </div>

  <div {{ content_attributes }}>
    <h1 class="mb-xl">{{ label }}</h1>
    <ul class="flex">
      <span class="pr-sm text-sm">Category:</span>
      {% for item in categories %}
        <li class="pr-sm text-sm">{{ item }}</li>
      {% endfor %}
    </ul>
    {{ content.field_staff_news_article_summary|field_value }}
    {{ content.field_staff_news_content|field_value }}
  </div>

  {# {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div {{ author_attributes }}>
        {% trans %}Submitted by
        {{ author_name }}
        on
        {{ date }}
        {% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %} #}
</article>
