<?php

/*
 * Implements theme_form_alter().
 *
 * Add ISU Theme class to Site Navbar search form
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;

function typhoon_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if( $form_id == 'search_block_form') {
    $form['#attributes']['class'][] = 'search__search-form';
    $form['keys']['#attributes']['class'][] = 'search__search-input';
    $form['keys']['#attributes']['placeholder'][] = 'Search Terms';
    $form['actions']['submit']['#attributes']['class'][] = 'search__search-button';
  }

  if( $form_id == 'views-exposed-form-staff-directory-page-1') {
    $form['#attributes']['class'][] = 'search__staff-form';
    // $form['keys']['#attributes']['class'][] = 'staff__staff-input';
    // $form['keys']['#attributes']['placeholder'][] = 'staff Terms';
    // $form['actions']['submit']['#attributes']['class'][] = 'staff__staff-button';
  }
}

/*
 * Implements theme_preprocess_page().
 *
 * Make theme settings available in templates
 */

function typhoon_preprocess_page(&$variables) {
  // header content
  $variables['relative_logo_url'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
  $variables['lib_util_nav1_text'] = theme_get_setting('lib_util_nav1_text');
  $variables['lib_util_nav1_url'] = theme_get_setting('lib_util_nav1_url');
  $variables['lib_util_nav2_text'] = theme_get_setting('lib_util_nav2_text');
  $variables['lib_util_nav2_url'] = theme_get_setting('lib_util_nav2_url');
  $variables['lib_util_nav3_text'] = theme_get_setting('lib_util_nav3_text');
  $variables['lib_util_nav3_url'] = theme_get_setting('lib_util_nav3_url');
  $variables['lib_util_nav4_text'] = theme_get_setting('lib_util_nav4_text');
  $variables['lib_util_nav4_url'] = theme_get_setting('lib_util_nav4_url');
  $variables['lib_util_nav5_text'] = theme_get_setting('lib_util_nav5_text');
  $variables['lib_util_nav5_url'] = theme_get_setting('lib_util_nav5_url');

  // footer
  $variables['footer_social_media1_url'] = theme_get_setting('footer_social_media1_url');
  $variables['footer_social_media1_icon'] = theme_get_setting('footer_social_media1_icon');
}

/*
 * Implements theme_preprocess_page().
 *
 * Make theme settings available in templates
 */

function typhoon_preprocess_page__front(&$variables) {

  $variables['lib_homepage_header_header'] = theme_get_setting('lib_homepage_header_header');
  $variables['lib_homepage_header_tagline'] = theme_get_setting('lib_homepage_header_tagline');

  // content types to fetch 
  $staff_types = ['staff_news','staff_updates'];

  // how many "articles" to fetch for each ....
  $staff_types_count = ['staff_news'=>6,'staff_updates'=>3];

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  foreach ($staff_types as $staff_type) {

      // grab first six sorted by changed (updated)?
      $results = \Drupal::entityQuery('node')->condition('type', $staff_type)->sort('changed', 'DESC')->sort('nid', 'DESC')->range(0, $staff_types_count[$staff_type])->execute();

      // save the results to pass to the template for each type 
      $staff_news_articles = array();

      foreach ($results as $result) {
  
        // fix this
        $nid = $result;
        $node = $node_storage->load($nid);

        $news_item = array();
        $news_item['id'] = $nid;
        // the link: parameter in the newscard call will not allow appending id to stub?
        $news_item['item_url_stub'] = 'node/'.$nid;
        $news_item['title'] = $node->getTitle();

        if ($node->field_staff_news_article_summary)
        {
            foreach ($node->field_staff_news_article_summary as $delta => $thing) 
            {
                $field = 'field_staff_news_article_summary';
                $referencedEntity = $node->get($field)->first()->get('entity')->getTarget()->getValue();
                $news_item['body_summary'] = $referencedEntity->field_gc_text_text->value; 
            }
        }
        elseif ($node->field_staff_updates_summary)
        {
            foreach ($node->field_staff_updates_summary as $delta => $thing) 
            {
                $field = 'field_staff_updates_summary';
                $referencedEntity = $node->get($field)->first()->get('entity')->getTarget()->getValue();
// need to check for field existence?
                $news_item['body_summary'] = $referencedEntity->field_gc_text_text->value; 
            }
        }

        if ($node->field_staff_news_main_image)
        {
            foreach ($node->field_staff_news_main_image as $delta => $thing) 
            {
                $field = 'field_staff_news_main_image';
                $referencedEntity = $node->get($field)->first()->get('entity')->getTarget()->getValue();
                $news_item['image_uri'] = file_create_url($referencedEntity->uri->value); 
            }
        }
        elseif ($node->field_staff_updates_main_image)
        {
            foreach ($node->field_staff_updates_main_image as $delta => $thing) 
            {
                $field = 'field_staff_updates_main_image';
                $referencedEntity = $node->get($field)->first()->get('entity')->getTarget()->getValue();
                $news_item['image_uri'] = file_create_url($referencedEntity->uri->value); 
            }
        }

        $staff_news_articles[] = $news_item;

      }
      $variables[$staff_type.'_custom'] = $staff_news_articles; 
  }
}


